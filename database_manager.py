import json
import os
import importlib
from datetime import datetime
from config import MOCK_DATA_DIR, DATABASES_CONFIG, POSTGRES_CONFIG
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT


class DatabaseManager:
    def __init__(self):
        self.created_databases = []

    def create_database_if_not_exists(self, db_name):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ postgres –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ë–î
            conn = psycopg2.connect(
                user=POSTGRES_CONFIG['user'],
                password=POSTGRES_CONFIG['password'],
                host=POSTGRES_CONFIG['host'],
                port=POSTGRES_CONFIG['port'],
                database='postgres'
            )
            conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s", (db_name,))
            exists = cursor.fetchone()

            if not exists:
                cursor.execute(f'CREATE DATABASE "{db_name}"')
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —Å–æ–∑–¥–∞–Ω–∞")
            else:
                print(f"‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            cursor.close()
            conn.close()
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{db_name}': {e}")
            return False

    def create_database(self, db_name, db_config):
        """–°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏"""
        print(f"\n{'=' * 50}")
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_config['description']}")
        print(f"–ò–º—è –±–∞–∑—ã: {db_config['db_name']}")
        print(f"{'=' * 50}")

        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not self.create_database_if_not_exists(db_config['db_name']):
                return False

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —ç—Ç–æ–π –ë–î
            models_module = importlib.import_module(db_config['models_module'])
            database = models_module.get_database()
            models = models_module.get_models()

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            database.connect()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º (–µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
            database.drop_tables(models, safe=True)

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            database.create_tables(models)
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            self._load_mock_data_smart(db_config, models_module, database)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._show_database_stats(models_module, database)

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            database.close()
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

            self.created_databases.append(db_config['db_name'])
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã {db_name}: {e}")
            import traceback
            traceback.print_exc()
            return False

    def _get_loading_order(self, db_name, models_module):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        # –î–ª—è school_world –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        if db_name == 'school_world':
            return ['teachers', 'classes', 'students', 'subjects', 'grades']
        elif db_name == 'games_easy':
            return ['games']
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–∞–∑
            models = models_module.get_models()
            model_dependencies = {}

            for model in models:
                dependencies = []
                for field_name, field in model._meta.fields.items():
                    if hasattr(field, 'rel_model') and field.rel_model:
                        dependencies.append(field.rel_model.__name__.lower())
                model_dependencies[model.__name__.lower()] = dependencies

            # –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            loading_order = []
            visited = set()

            def visit(model_name):
                if model_name in visited:
                    return
                visited.add(model_name)
                for dependency in model_dependencies.get(model_name, []):
                    visit(dependency)
                loading_order.append(model_name)

            for model_name in model_dependencies.keys():
                visit(model_name)

            return loading_order

    def _load_mock_data_smart(self, db_config, models_module, database):
        """–£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏"""
        mock_data_path = os.path.join(MOCK_DATA_DIR, db_config['mock_data_folder'])

        if not os.path.exists(mock_data_path):
            print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {mock_data_path}")
            return

        print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑: {db_config['mock_data_folder']}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
        loading_order = self._get_loading_order(db_config['db_name'], models_module)
        print(f"üîÄ –ü–æ—Ä—è–¥–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏: {', '.join(loading_order)}")

        # –°–æ–∑–¥–∞–µ–º mapping –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∫ –∫–ª–∞—Å—Å–∞–º –º–æ–¥–µ–ª–µ–π
        model_mapping = {}
        for model in models_module.get_models():
            table_name = getattr(model._meta, 'table_name', model.__name__.lower())
            model_mapping[table_name] = model
            model_mapping[model.__name__.lower()] = model

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for table_name in loading_order:
            self._load_table_safely(mock_data_path, table_name, model_mapping, models_module, database)

    def _load_table_safely(self, mock_data_path, table_name, model_mapping, models_module, database):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            filename = f"{table_name}.json"
            file_path = os.path.join(mock_data_path, filename)

            if not os.path.exists(file_path):
                print(f"  ‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ò—â–µ–º –º–æ–¥–µ–ª—å
            model_class = model_mapping.get(table_name)
            if not model_class:
                class_name = table_name.capitalize()
                model_class = getattr(models_module, class_name, None)

            if not model_class:
                print(f"  ‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            if not data:
                print(f"  ‚ö†Ô∏è {table_name}: —Ñ–∞–π–ª –ø—É—Å—Ç")
                return

            print(f"  üìñ {table_name}: {len(data)} –∑–∞–ø–∏—Å–µ–π")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
            processed_data = self._process_dates(data)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ - –ö–ê–ñ–î–£–Æ –ó–ê–ü–ò–°–¨ –í –û–¢–î–ï–õ–¨–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
            inserted_count = 0
            errors_count = 0

            for i, item in enumerate(processed_data):
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
                    with database.atomic():
                        model_class.create(**item)
                    inserted_count += 1

                except Exception as e:
                    errors_count += 1
                    error_msg = str(e)

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if 'duplicate key' in error_msg or 'unique constraint' in error_msg:
                        print(f"    ‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –∑–∞–ø–∏—Å–∏ {i + 1}: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    elif 'foreign key' in error_msg.lower():
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ –≤ –∑–∞–ø–∏—Å–∏ {i + 1}: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    else:
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–∏—Å–∏ {i + 1}: {error_msg}")

            # –û—Ç—á–µ—Ç –ø–æ —Ç–∞–±–ª–∏—Ü–µ
            if errors_count == 0:
                print(f"  ‚úÖ {table_name}: –≤—Å–µ {inserted_count} –∑–∞–ø–∏—Å–µ–π –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            else:
                print(f"  ‚ö†Ô∏è {table_name}: {inserted_count} –¥–æ–±–∞–≤–ª–µ–Ω–æ, {errors_count} –æ—à–∏–±–æ–∫")

        except Exception as e:
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {table_name}: {e}")

    def _process_dates(self, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—è —Å –¥–∞—Ç–∞–º–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        processed_data = []
        for item in data:
            processed_item = item.copy()
            for key, value in item.items():
                if isinstance(value, str) and ('date' in key.lower() or 'birth' in key.lower()):
                    try:
                        processed_item[key] = datetime.strptime(value, '%Y-%m-%d').date()
                    except ValueError:
                        pass
            processed_data.append(processed_item)
        return processed_data

    def _show_database_stats(self, models_module, database):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")

        for model in models_module.get_models():
            try:
                count = model.select().count()
                print(f"   {model.__name__}: {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"   {model.__name__}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ - {e}")

    def create_all_databases(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üéì –ó–ê–ü–£–°–ö –°–û–ó–î–ê–ù–ò–Ø –£–ß–ï–ë–ù–´–• –ë–ê–ó –î–ê–ù–ù–´–• PostgreSQL")
        print("=" * 60)
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {POSTGRES_CONFIG['host']}:{POSTGRES_CONFIG['port']}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {POSTGRES_CONFIG['user']}")
        print("=" * 60)

        success_count = 0
        for db_name, db_config in DATABASES_CONFIG.items():
            if self.create_database(db_name, db_config):
                success_count += 1

        self._show_summary(success_count)

    def _show_summary(self, success_count):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        print(f"\n{'=' * 60}")
        print("üéâ –ò–¢–û–ì–ò –°–û–ó–î–ê–ù–ò–Ø –ë–ê–ó –î–ê–ù–ù–´–•")
        print(f"{'=' * 60}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {success_count} –∏–∑ {len(DATABASES_CONFIG)} –±–∞–∑")
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã: {', '.join(self.created_databases)}")

        if self.created_databases:
            print(f"\nüí° –ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
            for db in self.created_databases:
                print(f"   psql -h localhost -U postgres -d {db}")